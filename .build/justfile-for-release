# Should be run as:
#     just -f .build/justfile-for-release -d . (...)

set shell := ["bash", "-uc"]

# Just echo the purpose of this file
purpose:
    @echo "This file is used to automate some release tasks"
    @echo "(running in `pwd`)"

# Perform a release
perform-release: pre-release release post-release
    @echo "ðŸŽ‰ Successfully released Mutiny ${RELEASE_VERSION} ðŸš€"

# Initialize Git
init-git:
    @echo "Git setup"
    git config --global user.name "smallrye-ci"
    git config --global user.email "smallrye@googlegroups.com"

# Steps before releasing
pre-release: init-git
    @echo "ðŸš€ Pre-release steps..."
    @echo "Pre-release verifications"
    jbang .build/PreRelease.java --token=${RELEASE_TOKEN} --release-version=${RELEASE_VERSION}
    @echo "Bump project version to ${RELEASE_VERSION}"
    ./mvnw --batch-mode --no-transfer-progress versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false
    ./mvnw --batch-mode --no-transfer-progress versions:set -DnewVersion=${RELEASE_VERSION} -DgenerateBackupPoms=false -pl bom
    jbang .build/UpdateDocsAttributesFiles.java --mutiny-version=${RELEASE_VERSION}
    @echo "Check that the project builds (no tests)"
    ./mvnw --batch-mode --no-transfer-progress clean install -Prelease -DskipTests
    @echo "Bump workshop examples to ${RELEASE_VERSION}"
    .build/update-workshop-target-version.sh "${RELEASE_VERSION}"
    @echo "Check that the website builds"
    -[[ ${DEPLOY_WEBSITE} == "true" ]] && cd documentation && pipenv run mkdocs build

# Steps to release
release: pre-release
    @echo "ðŸš€ Release steps..."
    @echo "Commit release version and push upstream"
    git commit -am "chore(release): release Mutiny ${RELEASE_VERSION}"
    git push
    @echo "Call JReleaser"
    ./mvnw --batch-mode --no-transfer-progress -Pjreleaser jreleaser:full-release -pl :mutiny-project
    @echo "Bump to 999-SNAPSHOT and push upstream"
    ./mvnw --batch-mode --no-transfer-progress versions:set -DnewVersion=999-SNAPSHOT -DgenerateBackupPoms=false
    ./mvnw --batch-mode --no-transfer-progress versions:set -DnewVersion=999-SNAPSHOT -DgenerateBackupPoms=false -pl bom
    git commit -am "chore(release): set development version to 999-SNAPSHOT"
    git push

# Deploy to Maven Central
deploy-to-maven-central:
    @echo "Deploy to Maven Central"
    ./mvnw --batch-mode --no-transfer-progress deploy -Prelease -DskipTests

# Deploy snapshots to Maven Central
deploy-snapshots-to-maven-central:
    @echo "Deploy snapshots to Maven Central"
    ./mvnw --batch-mode --no-transfer-progress deploy -DskipTests

# Steps post-release
post-release:
    @echo "ðŸš€ Post-release steps..."
    -[[ ${CLEAR_REVAPI} == "true" ]] && just -f .build/justfile-for-release -d . clear-revapi
    -[[ ${DEPLOY_WEBSITE} == "true" ]] && .build/deploy-site.sh

# Clear RevAPI justifications
clear-revapi:
    #!/usr/bin/env bash
    jbang .build/CompatibilityUtils.java clear --version="${RELEASE_VERSION}" --do-not-clear-version-prefix="1."
    if [[ $(git diff --stat) != '' ]]; then
      git add -A
      git status
      git commit -m "chore(release): clear RevAPI breaking change justifications"
      git push
    else
      echo "No justifications cleared"
    fi
