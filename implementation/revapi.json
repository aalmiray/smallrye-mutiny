[ {
  "extension" : "revapi.java",
  "id" : "java",
  "configuration" : {
    "missing-classes" : {
      "behavior" : "report",
      "ignoreMissingAnnotations" : false
    }
  }
}, {
  "extension" : "revapi.filter",
  "configuration" : {
    "elements" : {
      "include" : [ {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.groups"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.spies"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.helpers.test"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.infrastructure"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.operators.multi.processors"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.subscription"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.tuples"
      }, {
        "matcher" : "java-package",
        "match" : "io.smallrye.mutiny.unchecked"
      } ]
    }
  }
}, {
  "extension" : "revapi.differences",
  "id" : "breaking-changes",
  "configuration" : {
    "criticality" : "highlight",
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "differences" : [
      {
        "ignore": true,
        "code": "java.method.removed",
        "old": "method <T> java.util.Queue<T> io.smallrye.mutiny.helpers.queues.Queues::createStrictSizeQueue(int)",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.field.removedWithConstant",
        "old": "field io.smallrye.mutiny.helpers.queues.Queues.TO_LARGE_TO_BE_BOUNDED",
        "justification": "Typo (internal API)"
      },
      {
        "ignore": true,
        "code": "java.class.removed",
        "old": "class io.smallrye.mutiny.helpers.queues.MpscLinkedQueue<T>",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.class.removed",
        "old": "class io.smallrye.mutiny.helpers.queues.SpscArrayQueue<E>",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.class.removed",
        "old": "class io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue<E>",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.field.removed",
        "old": "field io.smallrye.mutiny.helpers.queues.Queues.BUFFER_S",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.field.removed",
        "old": "field io.smallrye.mutiny.helpers.queues.Queues.BUFFER_XS",
        "justification": "Refactoring of internal APIs"
      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.GroupedMulti<K, T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>)",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>)",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiGlobalSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnCancellationSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnCompletionSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnFailureSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnItemSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnOverflowSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnRequestSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.helpers.spies.MultiOnTerminationSpy<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.AbstractMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.AbstractMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.MultiOperator<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.AbstractMultiOperator<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiBufferOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCacheOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCollectorOp<T, A, R>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiCombineLatestOp<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiConcatMapOp<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiConcatOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDemandCapping<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDemandPacer<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiDistinctOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiEmitOnOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout<I>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiFlatMapOp<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp.GroupedUnicast<K, T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiGroupByOp<T, K, V>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiIgnoreOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiLastItemOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiLogger<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiMapOp<T, U>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationCall<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCancellationInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionCall<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnCompletionInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnFailureTransform<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnItemInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnRequestCall<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnRequestInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationCall<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiOnTerminationInvoke<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRepeatWhilstOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRetryOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiRetryWhenOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiScanOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp<T, R>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp<T, U>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectFirstWhileOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectLastOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSelectWhereOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipLastOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp<T, U>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWindowOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiWithContext<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.MultiZipOp<O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.DeferredMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.EmptyMulti",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.FailedMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.GeneratorBasedMulti<T, S>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.IntervalMulti",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.NeverMulti",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.ResourceMulti<R, I>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.processors.UnicastProcessor<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.multi.replay.ReplayOperator<T>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      },
      {
        "ignore": true,
        "code": "java.annotation.removed",
        "old": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
        "new": "method <K extends java.lang.Enum<K>> io.smallrye.mutiny.operators.multi.split.MultiSplitter<T, K> io.smallrye.mutiny.Multi<T>::split(java.lang.Class<K>, java.util.function.Function<T, K>) @ io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti<I, O>",
        "annotation": "@io.smallrye.common.annotation.Experimental(\"Multi splitting is an experimental API in Mutiny 2.3.0\")",
        "justification": "Promotion of an experimental API"
        

      }
    ]
  }
}, {
  "extension" : "revapi.reporter.json",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "target/compatibility.json",
    "indent" : true,
    "append" : false,
    "keepEmptyFile" : true
  }
}, {
  "extension" : "revapi.reporter.text",
  "configuration" : {
    "minSeverity" : "POTENTIALLY_BREAKING",
    "minCriticality" : "documented",
    "output" : "out"
  }
} ]